{"version":3,"sources":["assets/images/robot.png","firebase/config.js","firebase/index.js","components/AnswersList.jsx","components/Answer.jsx","components/Chats.jsx","components/Chat.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","db","firestore","AnswersList","props","answers","map","value","index","content","nextId","select","key","toString","useStyles","makeStyles","createStyles","width","backgroundColor","marginBottom","Answer","classes","Button","className","button","variant","color","onClick","chats","height","overflow","Chats","List","id","chat","text","type","Chat","isQuestion","ListItem","ListItemAvatar","Avatar","alt","src","Robot","App","displayNextQuestion","nextQuestionId","state","dataset","push","question","setState","currentId","selectAnswer","selectedAnswer","setTimeout","test","a","document","createElement","href","target","click","initDataset","bind","collection","get","then","snapshots","forEach","doc","data","scrollArea","getElementById","scrollTop","scrollHeight","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab4a9403.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.b9a97cd8.png\";","const firebaseConfig = {\n    apiKey: \"AIzaSyBphkizaUzJGyNxoqMLdkTUNEJjpjwZlB4\",\n    authDomain: \"chatbot-apphub.firebaseapp.com\",\n    databaseURL: \"https://chatbot-apphub.firebaseio.com\",\n    projectId: \"chatbot-apphub\",\n    storageBucket: \"chatbot-apphub.appspot.com\",\n    messagingSenderId: \"873920781864\",\n    appId: \"1:873920781864:web:d1134e2b40020add5adf1d\",\n    measurementId: \"G-3G35VGV2CF\"\n  };\n  \n  export default firebaseConfig;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport firebaseConfig from \"./config\";\n\nfirebase.initializeApp(firebaseConfig);\nexport const db = firebase.firestore();","import React from 'react';\nimport { Answer } from './index';\n\nconst AnswersList = (props) => {\n    return (\n        <div>\n            {props.answers.map((value, index) => {\n                return (\n                    <Answer content={value.content} nextId={value.nextId} select={props.select} key={index.toString()} />\n                )\n            })}\n        </div>\n    );\n}\n\nexport default AnswersList","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => createStyles({\n    \"button\": {\n        width: '100%',\n        backgroundColor: 'rgb(250, 50, 50)',\n        marginBottom: 5,\n        '&:hover': {\n            backgroundColor: 'rgb(250, 100, 100)'\n        }\n    }\n}),\n);\nconst Answer = (props) => {\n    const classes = useStyles();\n    return (\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => props.select(props.content, props.nextId)}>\n            {props.content}\n        </Button>\n    );\n}\n\nexport default Answer","import React from 'react';\nimport { Chat } from './index';\nimport List from '@material-ui/core/List';\nimport { makeStyles, createStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => createStyles({\n    chats: {\n        height: '77%',\n        overflow: 'auto'\n    }\n}))\n\nconst Chats = (props) => {\n    const classes = useStyles();\n    return (\n        <List className={classes.chats} id=\"scroll-area\">\n            {props.chats.map((chat, index) => {\n                return <Chat text={chat.text} type={chat.type} key={index.toString()} />\n            })}\n\n        </List>\n    );\n}\nexport default Chats;","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Robot from \"../assets/images/robot.png\";\n\nconst Chat = (props) => {\n    const isQuestion = (props.type === \"question\")\n    const classes = isQuestion ? 'p-chat__row' : 'p-chat__reverse'\n\n    return (\n        <ListItem className={classes}>\n            {(isQuestion) && (\n                <ListItemAvatar>\n                    <Avatar alt=\"robot\" src={Robot} />\n                </ListItemAvatar>\n            )}\n            <div className=\"chats-bubble\">\n                {props.text}\n            </div>\n        </ListItem>\n    );\n}\n\nexport default Chat;","import React from 'react';\nimport './assets/styles/style.css';\nimport { db } from './firebase/index';\nimport { AnswersList, Chats } from './components/index';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chats: [],\n      answers: [],\n      currentId: \"init\",\n      dataset: {}\n    }\n    this.selectAnswer = this.selectAnswer.bind(this);\n  }\n\n  displayNextQuestion = (nextQuestionId) => {\n    const chats = this.state.chats\n    const dataset = this.state.dataset[nextQuestionId]\n    chats.push({\n      text: dataset.question,\n      type: \"question\"\n    })\n    this.setState({\n      chats: chats,\n      answers: dataset.answers,\n      currentId: nextQuestionId\n    })\n  }\n\n  selectAnswer = (selectedAnswer, nextQuestionId) => {\n    switch (true) {\n      case (nextQuestionId === \"init\"):\n        setTimeout(() => this.displayNextQuestion(nextQuestionId), 500);\n        break;\n\n      case (/^https*/.test(nextQuestionId)):\n        const a = document.createElement('a');\n        a.href = nextQuestionId;\n        a.target = '_blank'\n        a.click();\n        break;\n      default:\n        const chats = this.state.chats\n        chats.push({\n          text: selectedAnswer,\n          type: \"answer\"\n        })\n        this.setState({\n          chats: chats\n        })\n        setTimeout(() => this.displayNextQuestion(nextQuestionId), 1000);\n        break;\n    }\n  }\n\n  initDataset = (dataset) => {\n    this.setState({\n      dataset: dataset\n    })\n  }\n\n  componentDidMount() {\n    (async () => {\n      const dataset = this.state.dataset\n\n      await db.collection('questions').get().then(snapshots => {\n        snapshots.forEach(doc => {\n          const id = doc.id\n          const data = doc.data()\n          dataset[id] = data\n        })\n      });\n      this.initDataset(dataset)\n      const initAnswer = \"\"\n      this.selectAnswer(initAnswer, this.state.currentId)\n    })();\n  }\n\n  componentDidUpdate() {\n    const scrollArea = document.getElementById('scroll-area');\n    if (scrollArea) {\n      scrollArea.scrollTop = scrollArea.scrollHeight;\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"c-section\">\n        <div className=\"c-box\">\n          <Chats chats={this.state.chats} />\n          <AnswersList answers={this.state.answers} select={this.selectAnswer} />\n        </div>\n      </section>\n    );\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}