{"ast":null,"code":"var _jsxFileName = \"/Users/hayashiryuunosuke/Public/workspace/chatbot-demo/src/App.jsx\";\nimport React from 'react';\nimport './assets/styles/style.css'; // import defaultDataset from './dataset';\n\nimport { db } from './firebase/index';\nimport { AnswersList, Chats } from './components/index';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.displayNextQuestion = nextQuestionId => {\n      const chats = this.state.chats;\n      const dataset = this.state.dataset[nextQuestionId];\n      chats.push({\n        text: dataset.question,\n        type: \"question\"\n      });\n      this.setState({\n        chats: chats,\n        answers: dataset.answers,\n        currentId: nextQuestionId\n      });\n    };\n\n    this.selectAnswer = (selectedAnswer, nextQuestionId) => {\n      switch (true) {\n        case nextQuestionId === \"init\":\n          setTimeout(() => this.displayNextQuestion(nextQuestionId), 500);\n          break;\n\n        case /^https*/.test(nextQuestionId):\n          const a = document.createElement('a');\n          a.href = nextQuestionId;\n          a.target = '_blank';\n          a.click();\n          break;\n\n        default:\n          const chats = this.state.chats;\n          chats.push({\n            text: selectedAnswer,\n            type: \"answer\"\n          });\n          this.setState({\n            chats: chats\n          });\n          setTimeout(() => this.displayNextQuestion(nextQuestionId), 1000);\n          break;\n      }\n    };\n\n    this.initDataset = dataset => {\n      this.setState({\n        dataset: dataset\n      });\n    };\n\n    this.state = {\n      chats: [],\n      answers: [],\n      currentId: \"init\",\n      dataset: {}\n    };\n    this.selectAnswer = this.selectAnswer.bind(this);\n  }\n\n  componentDidMount() {\n    (async () => {\n      const dataset = this.state.dataset;\n      await db.collection('questions').get().then(snapshots => {\n        snapshots.forEach(doc => {\n          const id = doc.id;\n          const data = doc.data();\n          dataset[id] = data;\n        });\n      });\n      this.initDataset(dataset);\n      const initAnswer = \"\";\n      this.selectAnswer(initAnswer, this.state.currentId);\n    })();\n  }\n\n  componentDidUpdate() {\n    const scrollArea = document.getElementById('scroll-area');\n\n    if (scrollArea) {\n      scrollArea.scrollTop = scrollArea.scrollHeight;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"c-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"c-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Chats, {\n      chats: this.state.chats,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(AnswersList, {\n      answers: this.state.answers,\n      select: this.selectAnswer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/hayashiryuunosuke/Public/workspace/chatbot-demo/src/App.jsx"],"names":["React","db","AnswersList","Chats","App","Component","constructor","props","displayNextQuestion","nextQuestionId","chats","state","dataset","push","text","question","type","setState","answers","currentId","selectAnswer","selectedAnswer","setTimeout","test","a","document","createElement","href","target","click","initDataset","bind","componentDidMount","collection","get","then","snapshots","forEach","doc","id","data","initAnswer","componentDidUpdate","scrollArea","getElementById","scrollTop","scrollHeight","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './assets/styles/style.css'\n// import defaultDataset from './dataset';\nimport { db } from './firebase/index'\nimport { AnswersList, Chats } from './components/index'\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chats: [],\n      answers: [],\n      currentId: \"init\",\n      dataset: {}\n    }\n    this.selectAnswer = this.selectAnswer.bind(this);\n  }\n\n  displayNextQuestion = (nextQuestionId) => {\n    const chats = this.state.chats\n    const dataset = this.state.dataset[nextQuestionId]\n    chats.push({\n      text: dataset.question,\n      type: \"question\"\n    })\n    this.setState({\n      chats: chats,\n      answers: dataset.answers,\n      currentId: nextQuestionId\n    })\n  }\n\n  selectAnswer = (selectedAnswer, nextQuestionId) => {\n    switch (true) {\n      case (nextQuestionId === \"init\"):\n        setTimeout(() => this.displayNextQuestion(nextQuestionId), 500);\n        break;\n\n      case (/^https*/.test(nextQuestionId)):\n        const a = document.createElement('a');\n        a.href = nextQuestionId;\n        a.target = '_blank'\n        a.click();\n        break;\n      default:\n        const chats = this.state.chats\n        chats.push({\n          text: selectedAnswer,\n          type: \"answer\"\n        })\n        this.setState({\n          chats: chats\n        })\n        setTimeout(() => this.displayNextQuestion(nextQuestionId), 1000);\n        break;\n    }\n  }\n\n  // componentDidMount(){\n  //   const initAnswer = \"\"\n  //   this.selectAnswer(initAnswer, this.state.currentId)\n  // }\n  initDataset=(dataset)=>{\n    this.setState({\n      dataset:dataset\n    })\n  }\n\n  componentDidMount() {\n    (async () => {\n      const dataset = this.state.dataset\n\n      await db.collection('questions').get().then(snapshots => {\n        snapshots.forEach(doc => {\n          const id = doc.id\n          const data = doc.data()\n          dataset[id] = data\n        })\n      });\n      this.initDataset(dataset)\n      const initAnswer = \"\"\n      this.selectAnswer(initAnswer, this.state.currentId)\n    })();\n  }\n\n  componentDidUpdate() {\n    const scrollArea = document.getElementById('scroll-area');\n    if (scrollArea) {\n      scrollArea.scrollTop = scrollArea.scrollHeight;\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"c-section\">\n        <div className=\"c-box\">\n          <Chats chats={this.state.chats} />\n          <AnswersList answers={this.state.answers} select={this.selectAnswer} />\n        </div>\n      </section>\n    );\n  }\n};"]},"metadata":{},"sourceType":"module"}